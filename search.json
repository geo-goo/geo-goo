[{"title":"flask 从后端学习前端.","url":"/2024/06/23/flask/","content":"Flask 从后端学习前端.教导写Flask,一天就能上手Flask,基础教学文章\nFlask是基于python 后端的一个套件 相似有Django\nFlask中小型的网页设计\n前端\nHTML\n\n&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Page Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;This is a Heading&lt;/h1&gt;    &lt;p&gt;This is a paragraph.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;\n\n\nCSS\n\nbody &#123;  background-color: lightblue;&#125;h1 &#123;  color: white;  text-align: center;&#125;p &#123;  font-family: verdana;  font-size: 20px;&#125;\n\n\nJs\n\n&lt;button type=&quot;button&quot; onclick=&quot;document.getElementById(&#x27;demo&#x27;).innerHTML = Date()&quot;&gt; Click me to display Date and Time.&lt;/button&gt;\n\n后端基础\nFlask简介\n\n什么是Flask？\nFlask的特点和优点\n安装和设置Flask开发环境\n\n\n第一个Flask应用\n\n创建一个简单的Flask应用\n路由和视图函数\n使用Jinja2模板引擎\n\n\n请求与响应\n\n处理GET和POST请求\n读取表单数据\n返回响应\n\n\n静态文件\n\n管理静态文件（CSS、JavaScript、图片等）\n\n\n模板\n\n使用模板继承和布局\n\n\n提供小型网页设计\n\n\n— close\n进阶\nFlask扩展\n\n安装和使用Flask扩展\n常用扩展简介（如Flask-WTF、Flask-SQLAlchemy等）\n\n\n数据库与Flask-SQLAlchemy\n\n配置数据库连接\n定义模型和关系\n数据库迁移（Flask-Migrate）\n\n\n表单处理与Flask-WTF\n\n创建和验证表单\n处理文件上传\n\n\n用户认证与授权\n\n用户注册和登录\n使用Flask-Login管理用户会话\n基于角色的访问控制\n\n\n安全性\n\n常见Web安全威胁及防护措施\n数据加密和保护\n安全配置和最佳实践\n\n\n建立中型的网页设计\n\n\n— unlock\n\n性能优化\n\n使用缓存提升性能（Flask-Caching）\n异步任务处理（Celery与Flask）\n优化数据库查询\n\n\n部署与运维\n\n部署到云服务器（如Heroku、AWS）\n使用Docker容器化Flask应用\n持续集成与持续部署（CI&#x2F;CD）\n\n\n高级扩展与集成\n\n集成第三方服务（如OAuth、支付网关）\n自定义Flask扩展\n\n\n\n教学框架\nFlask 是一个轻量级的Web应用框架，适合用于开发小型到中型的应用程序\n\n环境设置\n在开始之前，需要设置好开发环境。以下是基本步骤：\n\n安装 Python（推荐 Python 3.7 及以上版本）  创建虚拟环境并激活\n\n\n\npython -m venv .venvsource .venv/bin/activate  # 对于 Windows，使用 venv\\Scripts\\activatepip install Flask\n\n\n后端：Flask 基础\n创建第一个 Flask 应用\n\n\n\nfrom flask import Flaskapp = Flask(__name__)@app.route(&#x27;/&#x27;)def home():    return &quot;Hello, Flask!&quot;if __name__ == &#x27;__main__&#x27;:    app.run(debug=True)\n\n\n路由和视图函数\n\n@app.route(&#x27;/&#x27;)def home():    return &quot;Welcome to the Home Page!&quot;@app.route(&#x27;/about&#x27;)def about():    return &quot;This is the About Page.&quot;\n\n模板渲染\n在 templates 文件夹中创建 index.html\n\n\n\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Flask App&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;&#123;&#123; message &#125;&#125;&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\n\n\n修改视图函数以使用模板\n\nfrom flask import render_template@app.route(&#x27;/&#x27;)def hello_world():    return render_template(&#x27;index.html&#x27;, message=&#x27;Hello, Flask!&#x27;)\n\n\n进阶 :\n表单处理\n\n\n\n&lt;form action=&quot;/submit&quot; method=&quot;post&quot;&gt;    &lt;input type=&quot;text&quot; name=&quot;username&quot; placeholder=&quot;Enter your username&quot;&gt;    &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;&lt;/form&gt;\n\nfrom flask import request@app.route(&#x27;/submit&#x27;, methods=[&#x27;POST&#x27;])def submit():    username = request.form[&#x27;username&#x27;]    return f&quot;Hello, &#123;username&#125;!&quot;\n\n\n数据库集成\n\n前端：与 Flask 集成 on codepen.io\n\n静态文件 html\n使用模板引擎\ncss 模板 怎么塞入jinja2\n集成前端框架(Bootstrap)?\njquery?\n\n\n专案 简单做前端和后端结合.\n\n\n前端&lt;p&gt;Hello,I&#x27;m geo&lt;/p&gt;&lt;p&gt;你好,我是筑&lt;/p&gt;\n\n教导怎么使用html,css\nsass , pug 基本教学\n\n@mixin\n\n前端基础动画互动\n\nJavaScirpt\n\nRWD\n\n\n后端$color : blue@mixin size($h,$w) :    height : $h    width  : $w\n\n第一次使用flaskpip install Flask\n\nmkdir flask_appcd flask_app\n\n建立在 app.py 在根目录\nfrom flask import Flaskapp = Flask(__name__)@app.route(&#x27;/&#x27;)def home():    return &quot;Hello, Flask!&quot;if __name__ == &#x27;__main__&#x27;:    app.run(debug=True)\n\npython app.py\n\n模板@app.route(&#x27;/&#x27;)def home():    return &quot;Welcome to the Home Page!&quot;@app.route(&#x27;/about&#x27;)def about():    return &quot;This is the About Page.&quot;\n\nCreate a templates directory and add an index.html file Jinja2 :\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Home Page&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;&#123;&#123; message &#125;&#125;&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\n\nModify your app.py to render this template :from flask import render_template@app.route(&#x27;/&#x27;)def home():    return render_template(&#x27;index.html&#x27;, message=&quot;Welcome to the Home Page!&quot;)\n\n&lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;styles.css&#x27;) &#125;&#125;&quot;&gt;\n\nHandling POST Requests.Create a form in your templates directory:\n&lt;form action=&quot;/submit&quot; method=&quot;post&quot;&gt;    &lt;input type=&quot;text&quot; name=&quot;username&quot; placeholder=&quot;Enter your username&quot;&gt;    &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;&lt;/form&gt;\n\nUpdate your app.py to handle form submissions:\nfrom flask import request@app.route(&#x27;/submit&#x27;, methods=[&#x27;POST&#x27;])def submit():    username = request.form[&#x27;username&#x27;]    if not username:        return &quot;Username is required!&quot;    return f&quot;Hello, &#123;username&#125;!&quot;"},{"title":"julia学习机器学习.","url":"/2024/06/24/julia/","content":"julia 初学者"}]