[{"title":"flask 自学第三天","url":"/2024/03/07/flask_3/","content":"用户认证和授权在许多 Web 应用中，用户认证和授权是必不可少的功能。Flask-Login 是一个用于处理用户会话的扩展，可以帮助实现这一功能。\n1. 安装 Flask-Login首先，使用 pip 安装 Flask-Login：\npip install Flask-Login\n\n2. 配置 Flask-Login修改 app.py 文件，添加用户认证功能：\nfrom flask import Flask, render_template, request, redirect, url_forfrom flask_sqlalchemy import SQLAlchemyfrom flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_userapp = Flask(__name__)app.config[&#x27;SQLALCHEMY_DATABASE_URI&#x27;] = &#x27;sqlite:///test.db&#x27;app.config[&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;] = Falseapp.config[&#x27;SECRET_KEY&#x27;] = &#x27;your_secret_key&#x27;db = SQLAlchemy(app)login_manager = LoginManager()login_manager.init_app(app)login_manager.login_view = &#x27;login&#x27;class User(db.Model, UserMixin):    id = db.Column(db.Integer, primary_key=True)    name = db.Column(db.String(80), nullable=False)    password = db.Column(db.String(120), nullable=False)    def __repr__(self):        return f&#x27;&lt;User &#123;self.name&#125;&gt;&#x27;@login_manager.user_loaderdef load_user(user_id):    return User.query.get(int(user_id))@app.route(&#x27;/&#x27;)def home():    return render_template(&#x27;index.html&#x27;)@app.route(&#x27;/login&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])def login():    if request.method == &#x27;POST&#x27;:        name = request.form[&#x27;name&#x27;]        password = request.form[&#x27;password&#x27;]        user = User.query.filter_by(name=name).first()        if user and user.password == password:            login_user(user)            return redirect(url_for(&#x27;dashboard&#x27;))        else:            return &#x27;Invalid credentials&#x27;    return render_template(&#x27;login.html&#x27;)@app.route(&#x27;/dashboard&#x27;)@login_requireddef dashboard():    return f&#x27;Hello, &#123;current_user.name&#125;!&#x27;@app.route(&#x27;/logout&#x27;)@login_requireddef logout():    logout_user()    return redirect(url_for(&#x27;home&#x27;))if __name__ == &#x27;__main__&#x27;:    db.create_all()    app.run(debug=True)\n\n3. 创建登录模板创建 templates/login.html 文件，内容如下：\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Login&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form method=&quot;post&quot;&gt;        &lt;label for=&quot;name&quot;&gt;Name:&lt;/label&gt;        &lt;input type=&quot;text&quot; id=&quot;name&quot; name=&quot;name&quot;&gt;        &lt;br&gt;        &lt;label for=&quot;password&quot;&gt;Password:&lt;/label&gt;        &lt;input type=&quot;password&quot; id=&quot;password&quot; name=&quot;password&quot;&gt;        &lt;br&gt;        &lt;button type=&quot;submit&quot;&gt;Login&lt;/button&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;\n\n创建 templates/index.html 文件，内容如下：\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Home&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;Welcome to Flask App&lt;/h1&gt;    &lt;p&gt;&lt;a href=&quot;/login&quot;&gt;Login&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;\n\n4. 创建用户注册功能（可选）为了让用户可以注册账户，可以添加一个注册功能。修改 app.py 文件，添加注册路由：\n@app.route(&#x27;/register&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])def register():    if request.method == &#x27;POST&#x27;:        name = request.form[&#x27;name&#x27;]        password = request.form[&#x27;password&#x27;]        new_user = User(name=name, password=password)        db.session.add(new_user)        db.session.commit()        return redirect(url_for(&#x27;login&#x27;))    return render_template(&#x27;register.html&#x27;)\n\n创建 templates/register.html 文件，内容如下：\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Register&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form method=&quot;post&quot;&gt;        &lt;label for=&quot;name&quot;&gt;Name:&lt;/label&gt;        &lt;input type=&quot;text&quot; id=&quot;name&quot; name=&quot;name&quot;&gt;        &lt;br&gt;        &lt;label for=&quot;password&quot;&gt;Password:&lt;/label&gt;        &lt;input type=&quot;password&quot; id=&quot;password&quot; name=&quot;password&quot;&gt;        &lt;br&gt;        &lt;button type=&quot;submit&quot;&gt;Register&lt;/button&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;\n\n现在，用户可以通过访问 /register 注册新账户，并通过 /login 登录。\n结论在这篇博客的扩展部分，我们介绍了如何在 Flask 应用中实现用户认证和授权。通过集成 Flask-Login，我们可以轻松地管理用户会话，保护受限页面，并提供登录和注册功能。\n至此，我们已经涵盖了 Flask 的许多基本和高级功能。希望这些内容能够帮助你更好地理解和使用 Flask 进行 Web 开发。如果你有任何问题或需要更多帮助，请随时告诉我！\n"},{"url":"/2024/07/04/flask_4/","content":"Flask 文件上传和处理教程1. 环境准备首先，你需要安装 Flask 和相关的库。如果还没有安装，请使用以下命令：\npip install flaskpip install werkzeug\n\n2. 创建基本的 Flask 应用创建一个新的 Python 文件（如 app.py），并编写基础的 Flask 应用代码：\nfrom flask import Flask, request, redirect, url_for, send_from_directoryimport osapp = Flask(__name__)app.config[&#x27;UPLOAD_FOLDER&#x27;] = &#x27;uploads&#x27;app.config[&#x27;MAX_CONTENT_LENGTH&#x27;] = 16 * 1024 * 1024  # 限制上传文件大小为16MB# 确保上传文件夹存在if not os.path.exists(app.config[&#x27;UPLOAD_FOLDER&#x27;]):    os.makedirs(app.config[&#x27;UPLOAD_FOLDER&#x27;])@app.route(&#x27;/&#x27;)def index():    return &#x27;&#x27;&#x27;    &lt;!doctype html&gt;    &lt;title&gt;Upload File&lt;/title&gt;    &lt;h1&gt;Upload new File&lt;/h1&gt;    &lt;form method=post enctype=multipart/form-data&gt;      &lt;input type=file name=file&gt;      &lt;input type=submit value=Upload&gt;    &lt;/form&gt;    &#x27;&#x27;&#x27;if __name__ == &#x27;__main__&#x27;:    app.run(debug=True)\n\n3. 文件上传处理在 app.py 中添加处理文件上传的代码：\nfrom werkzeug.utils import secure_filenameALLOWED_EXTENSIONS = &#123;&#x27;txt&#x27;, &#x27;pdf&#x27;, &#x27;png&#x27;, &#x27;jpg&#x27;, &#x27;jpeg&#x27;, &#x27;gif&#x27;&#125;def allowed_file(filename):    return &#x27;.&#x27; in filename and filename.rsplit(&#x27;.&#x27;, 1)[1].lower() in ALLOWED_EXTENSIONS@app.route(&#x27;/&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])def upload_file():    if request.method == &#x27;POST&#x27;:        # 检查是否有文件上传        if &#x27;file&#x27; not in request.files:            return &#x27;No file part&#x27;        file = request.files[&#x27;file&#x27;]        if file.filename == &#x27;&#x27;:            return &#x27;No selected file&#x27;        if file and allowed_file(file.filename):            filename = secure_filename(file.filename)            file.save(os.path.join(app.config[&#x27;UPLOAD_FOLDER&#x27;], filename))            return redirect(url_for(&#x27;uploaded_file&#x27;, filename=filename))    return &#x27;&#x27;&#x27;    &lt;!doctype html&gt;    &lt;title&gt;Upload File&lt;/title&gt;    &lt;h1&gt;Upload new File&lt;/h1&gt;    &lt;form method=post enctype=multipart/form-data&gt;      &lt;input type=file name=file&gt;      &lt;input type=submit value=Upload&gt;    &lt;/form&gt;    &#x27;&#x27;&#x27;@app.route(&#x27;/uploads/&lt;filename&gt;&#x27;)def uploaded_file(filename):    return send_from_directory(app.config[&#x27;UPLOAD_FOLDER&#x27;], filename)\n\n4. 文件存储和管理你可以使用以下代码来确保上传的文件被存储在正确的目录中，并确保文件名是安全的。\n5. 安全性考虑为了保证上传文件的安全性，需要注意以下几点：\n\n使用 secure_filename 确保文件名不包含恶意字符。\n只允许特定类型的文件上传（通过 ALLOWED_EXTENSIONS）。\n限制文件大小（通过 MAX_CONTENT_LENGTH 配置项）。\n检查文件内容，避免上传恶意代码（可以使用文件内容检测库如 python-magic 等）。\n\n完整代码示例from flask import Flask, request, redirect, url_for, send_from_directoryimport osfrom werkzeug.utils import secure_filenameapp = Flask(__name__)app.config[&#x27;UPLOAD_FOLDER&#x27;] = &#x27;uploads&#x27;app.config[&#x27;MAX_CONTENT_LENGTH&#x27;] = 16 * 1024 * 1024  # 限制上传文件大小为16MBALLOWED_EXTENSIONS = &#123;&#x27;txt&#x27;, &#x27;pdf&#x27;, &#x27;png&#x27;, &#x27;jpg&#x27;, &#x27;jpeg&#x27;, &#x27;gif&#x27;&#125;# 确保上传文件夹存在if not os.path.exists(app.config[&#x27;UPLOAD_FOLDER&#x27;]):    os.makedirs(app.config[&#x27;UPLOAD_FOLDER&#x27;])def allowed_file(filename):    return &#x27;.&#x27; in filename and filename.rsplit(&#x27;.&#x27;, 1)[1].lower() in ALLOWED_EXTENSIONS@app.route(&#x27;/&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])def upload_file():    if request.method == &#x27;POST&#x27;:        # 检查是否有文件上传        if &#x27;file&#x27; not in request.files:            return &#x27;No file part&#x27;        file = request.files[&#x27;file&#x27;]        if file.filename == &#x27;&#x27;:            return &#x27;No selected file&#x27;        if file and allowed_file(file.filename):            filename = secure_filename(file.filename)            file.save(os.path.join(app.config[&#x27;UPLOAD_FOLDER&#x27;], filename))            return redirect(url_for(&#x27;uploaded_file&#x27;, filename=filename))    return &#x27;&#x27;&#x27;    &lt;!doctype html&gt;    &lt;title&gt;Upload File&lt;/title&gt;    &lt;h1&gt;Upload new File&lt;/h1&gt;    &lt;form method=post enctype=multipart/form-data&gt;      &lt;input type=file name=file&gt;      &lt;input type=submit value=Upload&gt;    &lt;/form&gt;    &#x27;&#x27;&#x27;@app.route(&#x27;/uploads/&lt;filename&gt;&#x27;)def uploaded_file(filename):    return send_from_directory(app.config[&#x27;UPLOAD_FOLDER&#x27;], filename)if __name__ == &#x27;__main__&#x27;:    app.run(debug=True)\n\n以上代码展示了一个简单的文件上传和处理应用程序。你可以根据实际需要进行扩展和修改，例如添加文件类型检测、数据库记录等功能。\n"},{"title":"flask 从后端学习前端.","url":"/2024/06/23/flask/","content":"Flask 从后端学习前端.教导写Flask,一天就能上手Flask,基础教学文章\nFlask是基于python 后端的一个套件 相似有Django\nFlask中小型的网页设计\n前端\nHTML\n\n&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Page Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;This is a Heading&lt;/h1&gt;    &lt;p&gt;This is a paragraph.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;\n\n\nCSS\n\nbody &#123;  background-color: lightblue;&#125;h1 &#123;  color: white;  text-align: center;&#125;p &#123;  font-family: verdana;  font-size: 20px;&#125;\n\n\nJs\n\n&lt;button type=&quot;button&quot; onclick=&quot;document.getElementById(&#x27;demo&#x27;).innerHTML = Date()&quot;&gt; Click me to display Date and Time.&lt;/button&gt;\n\n后端基础\nFlask简介\n\n什么是Flask？\nFlask的特点和优点\n安装和设置Flask开发环境\n\n\n第一个Flask应用\n\n创建一个简单的Flask应用\n路由和视图函数\n使用Jinja2模板引擎\n\n\n请求与响应\n\n处理GET和POST请求\n读取表单数据\n返回响应\n\n\n静态文件\n\n管理静态文件（CSS、JavaScript、图片等）\n\n\n模板\n\n使用模板继承和布局\n\n\n提供小型网页设计\n\n\n— close\n进阶\nFlask扩展\n\n安装和使用Flask扩展\n常用扩展简介（如Flask-WTF、Flask-SQLAlchemy等）\n\n\n数据库与Flask-SQLAlchemy\n\n配置数据库连接\n定义模型和关系\n数据库迁移（Flask-Migrate）\n\n\n表单处理与Flask-WTF\n\n创建和验证表单\n处理文件上传\n\n\n用户认证与授权\n\n用户注册和登录\n使用Flask-Login管理用户会话\n基于角色的访问控制\n\n\n安全性\n\n常见Web安全威胁及防护措施\n数据加密和保护\n安全配置和最佳实践\n\n\n建立中型的网页设计\n\n\n— unlock\n\n性能优化\n\n使用缓存提升性能（Flask-Caching）\n异步任务处理（Celery与Flask）\n优化数据库查询\n\n\n部署与运维\n\n部署到云服务器（如Heroku、AWS）\n使用Docker容器化Flask应用\n持续集成与持续部署（CI&#x2F;CD）\n\n\n高级扩展与集成\n\n集成第三方服务（如OAuth、支付网关）\n自定义Flask扩展\n\n\n\n教学框架\nFlask 是一个轻量级的Web应用框架，适合用于开发小型到中型的应用程序\n\n环境设置\n在开始之前，需要设置好开发环境。以下是基本步骤：\n\n安装 Python（推荐 Python 3.7 及以上版本）  创建虚拟环境并激活\n\n\n\npython -m venv .venvsource .venv/bin/activate  # 对于 Windows，使用 venv\\Scripts\\activatepip install Flask\n\n\n后端：Flask 基础\n创建第一个 Flask 应用\n\n\n\nfrom flask import Flaskapp = Flask(__name__)@app.route(&#x27;/&#x27;)def home():    return &quot;Hello, Flask!&quot;if __name__ == &#x27;__main__&#x27;:    app.run(debug=True)\n\n\n路由和视图函数\n\n@app.route(&#x27;/&#x27;)def home():    return &quot;Welcome to the Home Page!&quot;@app.route(&#x27;/about&#x27;)def about():    return &quot;This is the About Page.&quot;\n\n模板渲染\n在 templates 文件夹中创建 index.html\n\n\n\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Flask App&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;&#123;&#123; message &#125;&#125;&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\n\n\n修改视图函数以使用模板\n\nfrom flask import render_template@app.route(&#x27;/&#x27;)def hello_world():    return render_template(&#x27;index.html&#x27;, message=&#x27;Hello, Flask!&#x27;)\n\n\n进阶 :\n表单处理\n\n\n\n&lt;form action=&quot;/submit&quot; method=&quot;post&quot;&gt;    &lt;input type=&quot;text&quot; name=&quot;username&quot; placeholder=&quot;Enter your username&quot;&gt;    &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;&lt;/form&gt;\n\nfrom flask import request@app.route(&#x27;/submit&#x27;, methods=[&#x27;POST&#x27;])def submit():    username = request.form[&#x27;username&#x27;]    return f&quot;Hello, &#123;username&#125;!&quot;\n\n\n数据库集成\n\n前端：与 Flask 集成 on codepen.io\n\n静态文件 html\n使用模板引擎\ncss 模板 怎么塞入jinja2\n集成前端框架(Bootstrap)?\njquery?\n\n\n专案 简单做前端和后端结合.\n\n\n前端&lt;p&gt;Hello,I&#x27;m geo&lt;/p&gt;&lt;p&gt;你好,我是筑&lt;/p&gt;\n\n教导怎么使用html,css\nsass , pug 基本教学\n\n@mixin\n\n前端基础动画互动\n\nJavaScirpt\n\nRWD\n\n\n后端$color : blue@mixin size($h,$w) :    height : $h    width  : $w\n\n第一次使用flaskpip install Flask\n\nmkdir flask_appcd flask_app\n\n建立在 app.py 在根目录\nfrom flask import Flaskapp = Flask(__name__)@app.route(&#x27;/&#x27;)def home():    return &quot;Hello, Flask!&quot;if __name__ == &#x27;__main__&#x27;:    app.run(debug=True)\n\npython app.py\n\n模板@app.route(&#x27;/&#x27;)def home():    return &quot;Welcome to the Home Page!&quot;@app.route(&#x27;/about&#x27;)def about():    return &quot;This is the About Page.&quot;\n\nCreate a templates directory and add an index.html file Jinja2 :\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Home Page&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;&#123;&#123; message &#125;&#125;&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\n\nModify your app.py to render this template :from flask import render_template@app.route(&#x27;/&#x27;)def home():    return render_template(&#x27;index.html&#x27;, message=&quot;Welcome to the Home Page!&quot;)\n\n&lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;styles.css&#x27;) &#125;&#125;&quot;&gt;\n\nHandling POST Requests.Create a form in your templates directory:\n&lt;form action=&quot;/submit&quot; method=&quot;post&quot;&gt;    &lt;input type=&quot;text&quot; name=&quot;username&quot; placeholder=&quot;Enter your username&quot;&gt;    &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;&lt;/form&gt;\n\nUpdate your app.py to handle form submissions:\nfrom flask import request@app.route(&#x27;/submit&#x27;, methods=[&#x27;POST&#x27;])def submit():    username = request.form[&#x27;username&#x27;]    if not username:        return &quot;Username is required!&quot;    return f&quot;Hello, &#123;username&#125;!&quot;"},{"title":"julia学习机器学习.","url":"/2024/06/24/julia/","content":"julia 初学者"},{"title":"flask 自学第一天","url":"/2024/01/07/flask_1/","content":"欠网页重定向\n介绍 FlaskFlask 是一个基于 Python 的微型 Web 框架。它由 Armin Ronacher 开发，目的是创建一个简单但可扩展的 Web 框架。Flask 以其灵活性和简单性著称，适合初学者学习和构建小型到中型的 Web 应用程序。Flask 遵循 WSGI 标准，并且使用 Jinja2 模板引擎。\nFlask 的主要特点：\n轻量级：没有依赖过多的外部库，核心功能精简。\n模块化：可以根据需求添加各种扩展（如数据库、表单处理、认证等）。\n易于学习：具有简单直观的 API，适合初学者。\n灵活性高：允许开发者根据需求进行高度定制。\n\n安装 Flask在开始使用 Flask 之前，需要先安装它。可以使用 pip 进行安装：\npip install flask\n\n创建一个简单的 Flask 应用下面是一个基本的 Flask 应用示例，展示如何创建一个简单的 Web 服务。\n1. 创建一个 Flask 应用首先，新建一个名为 app.py 的文件，并添加以下代码：\nfrom flask import Flaskapp = Flask(__name__)@app.route(&#x27;/&#x27;)def home():    return &quot;Hello, Flask!&quot;if __name__ == &#x27;__main__&#x27;:    app.run(debug=True)\n\n在这段代码中，我们做了以下几件事：\n\n导入 Flask 类并创建一个 Flask 应用实例。\n定义一个路由 /，当用户访问根 URL 时，将调用 home 函数并返回 “Hello, Flask!”。\n启动 Flask 应用，并在开发模式下运行。\n\n2. 运行 Flask 应用在命令行中运行以下命令启动应用：\npython app.py\n\n访问 http://127.0.0.1:5000/，你应该能看到 “Hello, Flask!”。\n使用模板Flask 支持使用 Jinja2 模板引擎来生成动态 HTML 页面。下面是如何使用模板的示例。\n1. 创建模板文件首先，在项目目录中创建一个名为 templates 的文件夹，并在其中创建一个名为 index.html 的文件，内容如下：\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Flask App&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;&#123;&#123; message &#125;&#125;&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\n\n2. 修改 Flask 应用以使用模板更新 app.py 文件以使用模板：\nfrom flask import Flask, render_templateapp = Flask(__name__)@app.route(&#x27;/&#x27;)def home():    return render_template(&#x27;index.html&#x27;, message=&quot;Hello, Flask with Templates!&quot;)if __name__ == &#x27;__main__&#x27;:    app.run(debug=True)\n\n现在，当你访问 http://127.0.0.1:5000/ 时，应该能看到一个带有 “Hello, Flask with Templates!” 消息的 HTML 页面。\n处理表单提交Flask 可以轻松地处理表单提交。下面是一个处理简单表单提交的示例。\n1. 创建表单模板在 templates 文件夹中创建一个名为 form.html 的文件，内容如下：\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Flask Form&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form action=&quot;/submit&quot; method=&quot;post&quot;&gt;        &lt;label for=&quot;name&quot;&gt;Name:&lt;/label&gt;        &lt;input type=&quot;text&quot; id=&quot;name&quot; name=&quot;name&quot;&gt;        &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;\n\n2. 更新 Flask 应用以处理表单提交更新 app.py 文件：\nfrom flask import Flask, render_template, requestapp = Flask(__name__)@app.route(&#x27;/&#x27;)def home():    return render_template(&#x27;form.html&#x27;)@app.route(&#x27;/submit&#x27;, methods=[&#x27;POST&#x27;])def submit():    name = request.form.get(&#x27;name&#x27;)    return f&quot;Hello, &#123;name&#125;!&quot;if __name__ == &#x27;__main__&#x27;:    app.run(debug=True)\n\n现在，访问 http://127.0.0.1:5000/ 会显示一个表单。提交表单后，会显示 “Hello, [Name]!”。\n结论通过以上示例，我们了解了如何使用 Flask 创建一个简单的 Web 应用，如何使用模板生成动态内容，以及如何处理表单提交。Flask 的简单性和灵活性使它成为构建 Web 应用的绝佳选择。\n"},{"title":"flask 自学第二天","url":"/2024/02/07/flask_2/","content":"数据库集成Flask 支持多种数据库集成，常见的选择是使用 SQLAlchemy，这是一个功能强大的 ORM（对象关系映射）库，可以帮助你与数据库交互。下面介绍如何在 Flask 中集成 SQLAlchemy 并进行基本的数据库操作。\n1. 安装 Flask-SQLAlchemy首先，使用 pip 安装 Flask-SQLAlchemy：\npip install Flask-SQLAlchemy\n\n2. 配置和初始化 SQLAlchemy在 app.py 中配置和初始化 SQLAlchemy：\nfrom flask import Flask, render_template, requestfrom flask_sqlalchemy import SQLAlchemyapp = Flask(__name__)app.config[&#x27;SQLALCHEMY_DATABASE_URI&#x27;] = &#x27;sqlite:///test.db&#x27;app.config[&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;] = Falsedb = SQLAlchemy(app)class User(db.Model):    id = db.Column(db.Integer, primary_key=True)    name = db.Column(db.String(80), nullable=False)    def __repr__(self):        return f&#x27;&lt;User &#123;self.name&#125;&gt;&#x27;@app.route(&#x27;/&#x27;)def home():    return render_template(&#x27;form.html&#x27;)@app.route(&#x27;/submit&#x27;, methods=[&#x27;POST&#x27;])def submit():    name = request.form.get(&#x27;name&#x27;)    new_user = User(name=name)    db.session.add(new_user)    db.session.commit()    return f&quot;Hello, &#123;name&#125;!&quot;if __name__ == &#x27;__main__&#x27;:    db.create_all()    app.run(debug=True)\n\n在这个例子中：\n\n配置 SQLite 数据库（可以根据需要更改为其他数据库，如 MySQL 或 PostgreSQL）。\n创建一个 User 模型，包含 id 和 name 两个字段。\n在 /submit 路由中，将表单提交的数据保存到数据库中。\n\n3. 显示数据库中的数据我们可以扩展应用来显示所有用户。修改 app.py 文件，添加一个新的路由：\n@app.route(&#x27;/users&#x27;)def users():    all_users = User.query.all()    return render_template(&#x27;users.html&#x27;, users=all_users)\n\n创建 templates/users.html 文件，内容如下：\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Users&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;Users List&lt;/h1&gt;    &lt;ul&gt;        &#123;% for user in users %&#125;        &lt;li&gt;&#123;&#123; user.name &#125;&#125;&lt;/li&gt;        &#123;% endfor %&#125;    &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;\n\n现在，访问 http://127.0.0.1:5000/users 可以看到所有用户的列表。\n使用 Flask 扩展Flask 生态系统中有许多扩展，可以帮助你添加各种功能。例如：\n\nFlask-WTF：表单处理和验证。\nFlask-Login：用户会话管理。\nFlask-Migrate：数据库迁移管理。\n\n使用 Flask-WTF 处理表单首先，安装 Flask-WTF：\npip install Flask-WTF\n\n修改 app.py 文件以使用 Flask-WTF：\nfrom flask_wtf import FlaskFormfrom wtforms import StringField, SubmitFieldfrom wtforms.validators import DataRequiredclass NameForm(FlaskForm):    name = StringField(&#x27;Name&#x27;, validators=[DataRequired()])    submit = SubmitField(&#x27;Submit&#x27;)@app.route(&#x27;/&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])def home():    form = NameForm()    if form.validate_on_submit():        name = form.name.data        new_user = User(name=name)        db.session.add(new_user)        db.session.commit()        return f&quot;Hello, &#123;name&#125;!&quot;    return render_template(&#x27;form.html&#x27;, form=form)\n\n更新 templates/form.html 文件以使用 Flask-WTF 表单：\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Flask Form&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form method=&quot;post&quot;&gt;        &#123;&#123; form.hidden_tag() &#125;&#125;        &lt;p&gt;            &#123;&#123; form.name.label &#125;&#125;&lt;br&gt;            &#123;&#123; form.name(size=32) &#125;&#125;&lt;br&gt;            &#123;&#123; form.submit() &#125;&#125;        &lt;/p&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;\n\n结论通过这篇博客，我们详细介绍了 Flask 的基本使用方法，包括创建简单应用、使用模板、处理表单提交、集成数据库以及使用 Flask 扩展。Flask 的强大之处在于其灵活性和可扩展性，使其适合从小型到中型的各种 Web 应用开发。\n"}]